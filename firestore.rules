rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // --- PUBLIC WRITE ACCESS (must come before general rules) ---
    // Allow public creation of testimonials and appointments
    match /users/{userId}/testimonials/{testimonialId} {
      allow create: if request.resource.data.status == 'pending'
                    && request.resource.data.keys().hasAll(['name', 'rating', 'text', 'serviceId']);
    }

    match /users/{userId}/appointments/{appointmentId} {
      allow create: if true; // Allow anyone to create appointments
    }

    match /users/{userId}/reservations/{reservationId} {
      allow create: if true; // Allow anyone to create reservations
      allow update: if true; // Allow updating reservations for payment status
    }

    // --- PUBLIC READ ACCESS FOR ALL USER DATA ---
    // Allow anyone to read all user documents and subcollections for public booking
    match /users/{userId} {
      allow read: if true;
      allow write: if false;
    }

    match /users/{userId}/{documents=**} {
      allow read: if true;
      // Do not set write to false here as it would override specific write rules above
    }

    // --- OWNER ACCESS ---
    // Owners can read and write their own data
    match /users/{userId}/{documents=**} {
      allow read, write: if isOwner(userId);
    }

    // --- ADMIN RULES ---
    match /admins/{docId} {
      allow read, write: if request.auth.token.admin == true;
    }

    match /platform/{docId} {
      allow get, create: if request.auth != null;
    }

    match /platform_settings/{docId} {
      allow get, create: if request.auth != null;
    }

    // --- PUBLIC SLUGS ---
    match /public_slugs/{slug} {
      allow read: if true;
    }
  }
}
