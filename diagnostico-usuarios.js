// Diagn√≥stico de Problemas - P√°gina de Usu√°rios
// Execute este script no console do navegador na p√°gina do admin

console.log('üîç DIAGN√ìSTICO DA P√ÅGINA DE USU√ÅRIOS');
console.log('===================================');

// 1. Verificar se o usu√°rio est√° autenticado
console.log('1. üîê Verificando Autentica√ß√£o...');
const auth = window.firebase?.auth();
if (auth && auth.currentUser) {
    console.log('‚úÖ Usu√°rio autenticado:', auth.currentUser.email);
    console.log('üÜî UID:', auth.currentUser.uid);
} else {
    console.error('‚ùå Usu√°rio n√£o autenticado');
}

// 2. Verificar conex√£o com Firestore
console.log('\n2. üóÑÔ∏è Verificando Firestore...');
try {
    const db = window.firebase?.firestore();
    if (db) {
        console.log('‚úÖ Firestore conectado');
        // Tentar buscar usu√°rios
        db.collection('users').limit(1).get()
            .then(snapshot => {
                console.log(`‚úÖ Acesso √† cole√ß√£o 'users': ${snapshot.size} documento(s) encontrado(s)`);
            })
            .catch(error => {
                console.error('‚ùå Erro ao acessar cole√ß√£o users:', error);
            });
    } else {
        console.error('‚ùå Firestore n√£o dispon√≠vel');
    }
} catch (error) {
    console.error('‚ùå Erro ao verificar Firestore:', error);
}

// 3. Verificar Cloud Functions
console.log('\n3. ‚òÅÔ∏è Verificando Cloud Functions...');
try {
    const functions = window.firebase?.functions();
    if (functions) {
        console.log('‚úÖ Functions conectado');
        
        // Testar cada fun√ß√£o
        const functionsToTest = [
            'toggleUserStatus',
            'updatePlatformUser', 
            'deletePlatformUser',
            'forcePasswordReset',
            'impersonateUser'
        ];
        
        functionsToTest.forEach(funcName => {
            try {
                const callable = functions.httpsCallable(funcName);
                console.log(`‚úÖ Fun√ß√£o '${funcName}' dispon√≠vel`);
            } catch (error) {
                console.error(`‚ùå Erro na fun√ß√£o '${funcName}':`, error);
            }
        });
    } else {
        console.error('‚ùå Functions n√£o dispon√≠vel');
    }
} catch (error) {
    console.error('‚ùå Erro ao verificar Functions:', error);
}

// 4. Verificar elementos da UI
console.log('\n4. üé® Verificando Interface...');
const checkElement = (selector, name) => {
    const element = document.querySelector(selector);
    if (element) {
        console.log(`‚úÖ ${name} encontrado`);
        return element;
    } else {
        console.error(`‚ùå ${name} n√£o encontrado`);
        return null;
    }
};

// Verificar bot√µes de a√ß√£o
const editButtons = document.querySelectorAll('button[title="Editar"]');
const suspendButtons = document.querySelectorAll('button[title*="Suspender"], button[title*="Reativar"]');
const resetButtons = document.querySelectorAll('button[title*="reset"]');
const impersonateButtons = document.querySelectorAll('button[title*="Impersonar"]');
const deleteButtons = document.querySelectorAll('button[title="Excluir"]');

console.log(`üìä Bot√µes encontrados:`);
console.log(`   ‚úèÔ∏è Editar: ${editButtons.length}`);
console.log(`   üîÑ Suspender/Reativar: ${suspendButtons.length}`);
console.log(`   üîì Reset Senha: ${resetButtons.length}`);
console.log(`   üë§ Impersonar: ${impersonateButtons.length}`);
console.log(`   üóëÔ∏è Excluir: ${deleteButtons.length}`);

// 5. Verificar event listeners
console.log('\n5. üéØ Verificando Event Listeners...');
if (editButtons.length > 0) {
    console.log('‚úÖ Bot√µes de edi√ß√£o encontrados');
    // Adicionar listener de teste
    editButtons[0].addEventListener('click', (e) => {
        console.log('üñ±Ô∏è Clique no bot√£o Editar detectado');
    }, { once: true });
}

// 6. Verificar estado da aplica√ß√£o
console.log('\n6. üìä Verificando Estado da Aplica√ß√£o...');
try {
    // Verificar se existe React
    if (window.React) {
        console.log('‚úÖ React carregado');
    } else {
        console.log('‚ö†Ô∏è React n√£o detectado diretamente');
    }
    
    // Verificar se existe estado de usu√°rios
    const userElements = document.querySelectorAll('td');
    const userCount = Math.floor(userElements.length / 8); // 8 colunas por usu√°rio
    console.log(`üë• Aproximadamente ${userCount} usu√°rios na tabela`);
    
} catch (error) {
    console.error('‚ùå Erro ao verificar estado:', error);
}

// 7. Verificar console para erros
console.log('\n7. üêõ Verificando Erros no Console...');
console.log('‚ö†Ô∏è Verifique o console do navegador para erros de JavaScript');
console.log('‚ö†Ô∏è Procure por erros relacionados a:');
console.log('   - Firebase Auth');
console.log('   - Firestore permissions');
console.log('   - Cloud Functions');
console.log('   - Network requests');

// 8. Teste r√°pido de fun√ß√£o
console.log('\n8. üß™ Teste R√°pido (se autenticado)...');
if (auth && auth.currentUser) {
    console.log('üöÄ Para testar uma fun√ß√£o espec√≠fica, use:');
    console.log('   window.testUserFunction("FUNCTION_NAME", "USER_ID")');
    
    window.testUserFunction = async (functionName, userId) => {
        try {
            const functions = window.firebase.functions();
            const callable = functions.httpsCallable(functionName);
            const result = await callable({ userId });
            console.log(`‚úÖ Teste de ${functionName}:`, result);
        } catch (error) {
            console.error(`‚ùå Erro no teste de ${functionName}:`, error);
        }
    };
}

console.log('\n‚ú® Diagn√≥stico conclu√≠do!');
console.log('üìã Verifique os resultados acima para identificar problemas.');
